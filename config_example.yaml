# 进程监控配置示例
processes:
  # 示例1: 监控Web服务器
  - name: "nginx.exe"                       # Windows下的nginx
    args: []                                # 无额外启动参数
    ports: [80, 443]                        # 监控80和443端口
    health_checks:                          # HTTP健康检查
      - "http://localhost/health"
    check_interval: 30                      # 每30秒检查一次
    restart_delay: 5                        # 重启前等待5秒
    kill_on_exit: true                      # 监控狗退出时杀死被监控进程
    exclude_processes: []                   # 进程排斥列表（空表示无排斥）

  # 示例2: 监控自定义应用
  - name: "./myapp.exe"                     # 相对路径的应用
    args: ["-config", "app.conf", "-port", "8080"]  # 启动参数
    ports: [8080]                           # 监控8080端口
    health_checks:                          # 多个健康检查URL
      - "http://localhost:8080/api/health"
      - "http://localhost:8080/api/status"
    check_interval: 15                      # 每15秒检查一次
    restart_delay: 3                        # 重启前等待3秒
    kill_on_exit: false                     # 监控狗退出时保留被监控进程
    exclude_processes: ["backup.exe", "maintenance.exe"]  # 当这些进程存在时不启动

  # 示例3: 监控数据库服务
  - name: "mysqld"                          # Linux下的MySQL
    args: []
    ports: [3306]                           # 只监控端口，不做HTTP检查
    health_checks: []                       # 空的健康检查列表
    check_interval: 60                      # 每60秒检查一次
    restart_delay: 10                       # 重启前等待10秒
    kill_on_exit: false                     # 数据库服务通常不应该被杀死
    exclude_processes: ["mysql_backup.exe"] # 备份进程运行时不重启数据库

  # 示例4: 只监控进程存在性
  - name: "important-service"
    args: ["-daemon"]
    ports: []                               # 不监控端口
    health_checks: []                       # 不做HTTP检查
    check_interval: 20                      # 每20秒检查一次
    restart_delay: 5                        # 重启前等待5秒
    kill_on_exit: true                      # 监控狗退出时杀死进程
    exclude_processes: []                   # 无排斥进程

  # 示例5: 复杂的微服务监控
  - name: "C:\\Program Files\\MyApp\\service.exe"  # 完整路径
    args: ["-env", "production", "-log-level", "info"]
    ports: [8080, 8081, 9090]               # 监控多个端口
    health_checks:                          # 多种协议的健康检查
      - "http://localhost:8080/health"
      - "https://localhost:8081/status"
      - "http://localhost:9090/metrics"
    check_interval: 10                      # 频繁检查（每10秒）
    restart_delay: 2                        # 快速重启（等待2秒）
    kill_on_exit: true                      # 监控狗退出时杀死进程
    exclude_processes: ["deploy.exe", "update.exe", "migration.exe"]  # 部署/更新时不重启

  # 示例6: 进程排斥功能演示
  - name: "test_app.exe"                    # 测试应用
    args: []
    restart_command: "test_app_recovery.exe" # 重启时使用的备用程序路径
    work_dir: "./app_directory"             # 程序的工作目录
    ports: [8080]                           # 监控8080端口
    health_checks:                          # HTTP健康检查
      - "http://localhost:8080/health"
    check_interval: 10                      # 每10秒检查一次
    restart_delay: 5                        # 重启前等待5秒
    kill_on_exit: false                     # 监控狗退出时保留进程
    exclude_processes: ["notepad.exe", "calc.exe"]  # 当记事本或计算器运行时不启动/重启

  # 示例7: 重启命令和工作目录功能演示
  - name: "api_server.exe"                  # 主程序
    args: ["-config", "config.json"]
    restart_command: "api_server_fallback.exe" # 重启时使用的备用程序
    work_dir: "C:\\Program Files\\MyApp\\api" # 指定工作目录（绝对路径）
    ports: [3000]                           # 监控3000端口
    health_checks:                          # HTTP健康检查
      - "http://localhost:3000/api/health"
    check_interval: 15                      # 每15秒检查一次
    restart_delay: 3                        # 重启前等待3秒
    kill_on_exit: true                      # 监控狗退出时杀死进程
    exclude_processes: []                   # 无排斥进程

# 进程排斥功能说明：
# exclude_processes 配置项用于指定进程排斥列表
# 当列表中的任何一个进程正在运行时，监控器将：
# 1. 跳过初始启动该监控进程
# 2. 跳过重启该监控进程
# 3. 在日志中记录跳过原因
#
# 使用场景：
# - 系统维护期间（如备份、更新程序运行时）
# - 部署过程中（如部署脚本运行时）
# - 资源冲突避免（如同类服务运行时）
# - 手动干预期间（如调试工具运行时）

# 重启命令和工作目录功能说明：
# restart_command 配置项用于指定重启时使用的可执行文件路径
# - 如果未指定，将使用原始的 name 字段指定的程序
# - 支持相对路径和绝对路径
# - 适用场景：
#   * 使用备用/恢复版本的程序进行重启
#   * 在故障时切换到备份程序
#   * 使用特殊的恢复模式启动程序
#
# work_dir 配置项用于指定程序的工作目录
# - 如果未指定，将使用监控程序的当前工作目录
# - 支持相对路径和绝对路径
# - 适用场景：
#   * 程序需要在特定目录下运行
#   * 程序依赖于特定目录下的配置文件
#   * 多个相同程序需要在不同目录下运行